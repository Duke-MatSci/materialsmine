import Sample from '@/pages/explorer/sample/Sample.vue'
import createWrapper from '../../../jest/script/wrapper'
import { querySparql } from '@/modules/sparql'

// mocking functions
jest.mock('@/modules/sparql')
querySparql.mockImplementation((uri) => {})

// HTMLCanvasElement.prototype.getContext = () => {}

global.fetch = jest.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve({})
  })
)

describe('Sample.vue', () => {
  let wrapper
  // create wrapper and set loading to false
  beforeAll(async () => {
    wrapper = createWrapper(Sample, {}, false)
    await wrapper.vm.$nextTick()
    await wrapper.setData({ loading: false })
  })

  it('renders header', async () => {
    await wrapper.setData({
      header: {
        DOI: 'DOI of the sample',
        sample_label: 'Sample label',
        process_label: 'Sample process label'
      }
    })
    const header = wrapper.findComponent('[data-test="header"]')

    expect.assertions(4)
    expect(header.exists()).toBe(true)
    expect(header.text()).toContain('DOI of the sample')
    expect(header.text()).toContain('Sample label')
    expect(header.text()).toContain('Sample process label')
  })

  //   it('renders materials components and attributes', async () => {
  //     await wrapper.setData({
  //       materialComponents: [
  //         {
  //           class: 'Material class',
  //           role: 'Material role',
  //           materialProperties: [
  //             {
  //               type: 'Material property type',
  //               value: 'Material property value',
  //               units: 10
  //             }
  //           ]
  //         }
  //       ]
  //     })
  //     const materialComponents = wrapper.findComponent(
  //       '[data-test="materialComponents"]'
  //     )

  //     expect.assertions(6)
  //     expect(materialComponents.exists()).toBe(true)
  //     expect(materialComponents.text()).toContain('Material class')
  //     expect(materialComponents.text()).toContain('Material role')
  //     expect(materialComponents.text()).toContain('Material property type')
  //     expect(materialComponents.text()).toContain('Material property value')
  //     expect(materialComponents.text()).toContain('10')
  //   })

  //   it('renders curated properties of nanocomposite sample', async () => {
  //     await wrapper.setData({
  //       curatedProperties: [
  //         {
  //           type: 'example type',
  //           value: 10,
  //           units: 'example units'
  //         }
  //       ]
  //     })
  //     const curatedProperties = wrapper.findComponent(
  //       '[data-test="curatedProperties"]'
  //     )

  //     expect.assertions(4)
  //     expect(curatedProperties.exists()).toBe(true)
  //     expect(curatedProperties.text()).toContain('example type')
  //     expect(curatedProperties.text()).toContain(10)
  //     expect(curatedProperties.text()).toContain('example units')
  //   })

  //   it('renders process label and processing steps', async () => {
  //     await wrapper.setData({
  //       processLabel: 'example process label',
  //       processingSteps: [
  //         {
  //           parameterLabel: 'example parameter label',
  //           description: 'example description'
  //         }
  //       ]
  //     })
  //     const processLabel = wrapper.findComponent('[data-test="processLabel"]')
  //     const processingSteps = wrapper.findComponent(
  //       '[data-test="processingSteps"]'
  //     )
  //     expect.assertions(4)
  //     expect(processLabel.exists()).toBe(true)
  //     expect(processingSteps.exists()).toBe(true)

  //     expect(processLabel.text()).toContain('example process label')
  //     expect(processingSteps.text()).toContain('example parameter label')
  //   })

  //   it('renders sample images', async () => {
  //     await wrapper.setData({
  //       sampleImages: [
  //         {
  //           src: 'example src',
  //           alt: 'example alt'
  //         }
  //       ]
  //     })
  //     const sampleImages = wrapper.findComponent('[data-test="sampleImages"]')

  //     expect.assertions(2)
  //     expect(sampleImages.exists()).toBe(true)
  //     expect(sampleImages.html()).toContain(
  //       '<img src="example src" alt="example alt">'
  //     )
  //   })

  //   it('renders other samples', async () => {
  //     await wrapper.setData({
  //       otherSamples: ['sample-link-1', 'sample-link-2']
  //     })
  //     const otherSamples = wrapper.findComponent('[data-test="otherSamples"]')

//     expect.assertions(3)
//     expect(otherSamples.exists()).toBe(true)
//     expect(otherSamples.text()).toContain('sample-link-1')
//     expect(otherSamples.text()).toContain('sample-link-2')
//   })
})
