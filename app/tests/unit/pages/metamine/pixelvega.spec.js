import createWrapper from '../../../jest/script/wrapper'
import { enableAutoDestroy } from '@vue/test-utils'
import MetamaterialPlot from '@/pages/metamine/visualization/MetamaterialPlot.vue'

const apollo = {
  pixelData: {
    totalItems: 2,
    pageSize: 2,
    pageNumber: 1,
    totalPages: 1,
    hasPreviousPage: false,
    hasNextPage: false,
    data: [
      {
        symmetry: 'C4v',
        unit_cell_x_pixels: '10',
        C11: '2963290579',
        C12: '1459531181',
        C22: '2963290579',
        C16: '0',
        C26: '0',
        C66: '751879699',
        CM0: 'vero_white',
        CM0_C11: null,
        CM0_C12: null,
        CM0_C22: null,
        CM0_C16: null,
        CM0_C26: null,
        CM0_C66: null,
        CM1: 'tango_black',
        CM1_C11: null,
        CM1_C12: null,
        CM1_C22: null,
        CM1_C16: null,
        CM1_C26: null,
        CM1_C66: null,
        geometry_full: '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      },
      {
        symmetry: 'C2v',
        unit_cell_x_pixels: '50',
        C11: '1101973408.14',
        C12: '161263898.30',
        C22: '619115884.41',
        C16: '0.00',
        C26: '0.00',
        C66: '126628360.61',
        CM0: 'void',
        CM0_C11: null,
        CM0_C12: null,
        CM0_C22: null,
        CM0_C16: null,
        CM0_C26: null,
        CM0_C66: null,
        CM1: 'vero_white',
        CM1_C11: null,
        CM1_C12: null,
        CM1_C22: null,
        CM1_C16: null,
        CM1_C26: null,
        CM1_C66: null,
        geometry_full
      }
    ]
  }
}

describe('MetamaterialPlot.vue', () => {
  let wrapper
  beforeEach(async () => {
    wrapper = await createWrapper(MetamaterialPlot, {
      mocks: {
        $apollo: {
          loading: false
        }
      }
    }, true)
    await wrapper.setData({ pixelData: apollo.pixelData })
  })

  enableAutoDestroy(afterEach)

  it('loads vegaembed', async () => {
    expect.assertions(1)
    expect(await wrapper.find('#vegaembed').exists()).toBe(true)
  })

  it('renders all selectors and options', () => {
    expect.assertions(4)
    const selectors = wrapper.findAll('select')
    expect(selectors.length).toBe(3)
    expect(selectors.at(0).text()).toContain('C11')
    expect(selectors.at(1).text()).toContain('C12')
    const options = wrapper.findAll('option')
    const numXAxisOpts = wrapper.vm.xAxisOpts.length
    const numYAxisOpts = wrapper.vm.yAxisOpts.length
    const numPixelDimOpts = wrapper.vm.pixelDimOpts.length
    expect(options.length).toBe(numXAxisOpts + numYAxisOpts + numPixelDimOpts)
  })

  it('shows loading spinner when the specification changes', async () => {
    expect.assertions(2)
    expect(await wrapper.find('.spinner').exists()).toBe(false)
    await wrapper.setData({ loading: true })
    expect(await wrapper.find('.spinner').exists()).toBe(true)
  })

  it('shows loading spinner when apollo loads data', async () => {
    expect.assertions(2)
    expect(await wrapper.find('.spinner').exists()).toBe(false)
    await wrapper.setData({ loading: false, $apollo: { loading: true } })
    expect(await wrapper.find('.spinner').exists()).toBe(true)
  })
})
