# -*- config:utf-8 -*-
from whyis import autonomic, importer
from materialsmine.agent import *
import whyis_unit_converter.unit_converter_agent as converter


SITE_NAME = "MaterialsMine"
SITE_DESCRIPTION = 'A knowledge graph for Material Informatics.'
LOD_PREFIX = 'http://materialsmine.org'
SECURITY_EMAIL_SENDER = "Whyis <changeme@example.com>"
DEFAULT_LANGUAGE = 'en'
BASE_RATE_PROBABILITY = 0.5
VOCAB_FILE = "vocab.ttl"

# EMAIL CONFIGURATION
## MAIL_SERVER = "",
## MAIL_PORT = 587,
## MAIL_USE_TLS = True,
## MAIL_USE_SSL = False,
## MAIL_DEBUG = False,
## MAIL_USERNAME = '',
## MAIL_PASSWORD = '',
## DEFAULT_MAIL_SENDER = "Whyis <changeme@example.com>",
DEFAULT_ANONYMOUS_READ = True

NAMESPACES = [
    importer.LinkedData(
        prefix = LOD_PREFIX+'/dcat/',
        url = 'http://www.w3.org/ns/dcat#%s',
        headers={'Accept':'text/turtle'},
        format='turtle'
    ),
    importer.LinkedData(
        prefix = LOD_PREFIX+'/doi/',
        url = 'http://dx.doi.org/%s',
        headers={'Accept':'text/turtle'},
        format='turtle',
        postprocess_update= ['''insert {
            graph ?g {
                ?pub a <http://purl.org/ontology/bibo/AcademicArticle>.
            }
        } where {
            graph ?g {
                ?pub <http://purl.org/ontology/bibo/doi> ?doi.
            }
        }''',
        '''delete {
          ?author <http://www.w3.org/2002/07/owl#sameAs> ?orcid.
        } insert {
            graph ?g {
                ?author <http://www.w3.org/ns/prov#specializationOf> ?orcid.
            }
        } where {
            graph ?g {
                ?author a <http://xmlns.com/foaf/0.1/Person>;
                  <http://www.w3.org/2002/07/owl#sameAs> ?orcid.
            }
        }
        ''']
    ),
    importer.LinkedData(
        prefix = LOD_PREFIX+'/orcid/',
        url = 'http://orcid.org/%s',
        headers={'Accept':'application/ld+json'},
        format='json-ld',
        replace=[
            ('\\"http:\\/\\/schema\\.org\\",', '{"@vocab" : "http://schema.org/"},'),
            ('https://doi.org/', 'http://dx.doi.org/'),
            ('https://', 'http://'),
        ],
        postprocess_update= ['''delete {
          ?org ?p ?o.
          ?s ?p ?org.
        } insert {
            graph ?g {
                ?s ?p ?o.
            }
        } where {
            graph ?g {
                {
                ?org a <http://schema.org/Organization>;
                  <http://schema.org/identifier> [
                      a <http://schema.org/PropertyValue>;
                      <http://schema.org/propertyID> ?propertyID;
                      <http://schema.org/value> ?idValue;
                  ].
                  ?org ?p ?o.
                  bind(IRI(concat("%s/organization/", str(?propertyID),"/",str(?idValue))) as ?s)
                } union {
                ?org a <http://schema.org/Organization>;
                  <http://schema.org/identifier> [
                      a <http://schema.org/PropertyValue>;
                      <http://schema.org/propertyID> ?propertyID;
                      <http://schema.org/value> ?idValue;
                  ].
                  ?s ?p ?org.
                  bind(IRI(concat("%s/organization/", str(?propertyID),"/",str(?idValue))) as ?o)
                }
            }
        }'''  % (LOD_PREFIX, LOD_PREFIX) ,
        '''
        insert {
            graph ?g {
                ?s <http://schema.org/name> ?name.
            }
        } where {
            graph ?g {
                ?s <http://schema.org/alternateName> ?name.
            }
        }
        ''']
    ),
    importer.LinkedData(
        prefix = LOD_PREFIX+'/dbpedia/',
        url = 'http://dbpedia.org/resource/%s',
        headers={'Accept':'text/turtle'},
        format='turtle',
        postprocess_update= '''insert {
            graph ?g {
                ?article <http://purl.org/dc/terms/abstract> ?abstract.
            }
        } where {
            graph ?g {
                ?article <http://dbpedia.org/ontology/abstract> ?abstract.
            }
        }
        '''
    )
]

INFERENCERS = {
    "SDDAgent": autonomic.SDDAgent(),
    "SETLr": autonomic.SETLr(),
    "SETLMaker": autonomic.SETLMaker(),
    "CacheUpdater" : autonomic.CacheUpdater(),
    "UnitConverter": converter.UnitConverter(),
    "EntityExtractor" : autonomic.nlp.EntityExtractor(),
    "EntityResolver" : autonomic.nlp.EntityResolver(),
}

INFERENCE_TASKS = [
]
